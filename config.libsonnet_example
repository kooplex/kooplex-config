{
  local main = self,
  fqdn: 'k8plex-test.hu',
  ns: 'k8plex-test',
  nspods: self.ns,
  nsjobs: self.ns,
  nfsvol: '/k8plex_test',
  nfsserver: 'nfsprov',
  debug: true,  // debug mode for remote python debug module
  ssh: true,  // for remote ssh connection

  hub: {
    nodename: 'n1',
    appname: 'hub',
    dbname: 'hub',
    dbuser: 'hub',
    dbpw: 'fdsal',
    dbrootpw: 'dfal',
    image: 'hub-v4.0',
    djangosecret: 'sdkgksjhgksa',
    redis_pw: 'redpw',

  },

  ldap: {
    appname: 'ldap',
    pw: 'dfbdsb',
    authns: main.ns,
    pw: '',
    base: '',
    binddn: '',
    basegroup: '',
  },

  volumes: {
    hub: main.ns + '-hub',
    hubPath: main.nfsvol + '/service/hub',
    garbage: main.ns + '-garbage',
    garbagePath: main.nfsvol + '/garbage',
    project: main.ns + '-project',
    projectPath: main.nfsvol + '/projects',
    edu: main.ns + '-edu',
    eduPath: main.nfsvol + '/edu',
    scratch: main.ns + '-scratch',
    scratchPath: main.nfsvol + '/scratch',
    report: main.ns + '-report',
    reportPath: main.nfsvol + '/reports',
    home: main.ns + '-home',
    homePath: main.nfsvol + '/home',
  },

  PV(name, cap='1G', path='/srv/vols', server=self.nfsserver): {
    apiVersion: 'v1',
    kind: 'PersistentVolume',
    metadata: {
      name: name,
    },
    spec: {
      capacity: {
        storage: cap,
      },
      volumeMode: 'Filesystem',
      accessModes: [
        'ReadWriteMany',
      ],
      persistentVolumeReclaimPolicy: 'Retain',
      nfs: {
        path: path,
        server: server,
      },
    },
  },

  PVC(name, pvname, ns=self.ns, cap='1G'): {
    apiVersion: 'v1',
    kind: 'PersistentVolumeClaim',
    metadata: {
      name: name,
      namespace: ns,
    },
    spec: {
      accessModes: [
        'ReadWriteMany',
      ],
      volumeMode: 'Filesystem',
      resources: {
        requests: {
          storage: cap,
        },
      },
      storageClassName: '',
      volumeName: pvname,
    },
  },
}

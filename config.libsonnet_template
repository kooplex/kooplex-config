{
  local main = self,
  fqdn: 'k8plex.example.com', # hostname
  ns: 'k8plex',  # Kubernetes namespace
  nspods: self.ns, # Kubernetes namespace for the user pods
  nsjobs: self.ns, # Kubernetes namespace for the job pods
  nfsvol: '/k8plex', # Kubernetes nfs volume for pv
  nfsserver: 'nfsprov', # Kubernetes nfs server for pv
  instance_subpath:"kooplex", # Kubernetes optional subdir on the nfs server
  storageCapacity: '100G',
  debug: true,  // debug mode for remote python debug module
  secretName: 'srv-kooplex-teszt1-elte-hu-tls',
  admin_email: 'kooplex@elte.hu',
  email_host: 'mail.elte.hu',

# Frontend, K8plex Hub options
  hub: {  
    nodename: 'n1',
    appname: 'hub',
    dbname: 'hub',
    dbuser: 'hub',
    dbpw: '',
    dbrootpw: '',
    image: 'image-registry.vo.elte.hu/hub-uwsgi-v8',
    djangosecret: '',
    redis_pw: '',
    redis_teleport: '',
    command: "echo PS1=\\'\\\\[\\\\033\\[01\\;36m\\\\]\\\\u\\\\[\\\\033\\[00m\\\\]@\\\\[\\\\033\\[00\\;32m\\\\]\\\\h-platform\\\\[\\\\033\\[00m\\\\]: \\\\[\\\\033\\[01\\;33m\\\\]\\\\w\\\\[\\\\033\\[00m\\\\]\\\\$ \\' >> /root/.bashrc",

  oauth: {
    djangosecret: '',
    djangodbname: '',
    djangodbrootpw: '',
    djangodbpw: '',
    djangodbuser: '',
  },

# Kooplex-Auth options
  oauth: {
    appname: 'oauth',
    dbname: 'oauth',
    dbuser: 'kooplex',
    dbpw: '',
    dbrootpw: '',
    dbhostname: 'oauth-db',
    image: 'image-registry/k8plex-oauth',
    djangosecret: '',
  },

# LDAP server options
  ldap: {
    appname: 'ldapservice',
    authns: main.ns,
    pw: 'fdhoihsaoifs',
    binddn: 'cn=admin,dc=kooplex',
    base: 'dc=kooplex',
    basegroup: 'ou=edu,dc=kooplex',
  },

  proxy: {
    appname: 'proxy',
    image : 'jupyterhub/configurable-http-proxy:4.2.1',
    nodename : '',
  },

  saml: {
    url: 'idp.elte.hu',
    name: 'Kooplex teszt SP',
  },

# For PV and PVC 
  volumes: {
    service: main.ns + '-service',
    servicePath: main.nfsvol + '/service',
    serviceCapacity: main.storageCapacity,
    garbage: main.ns + '-garbage',
    garbagePath: main.nfsvol + '/garbage',
    garbageCapacity: main.storageCapacity,
    home: 'home-' + main.ns,
    homePath: '/k8plex_home',
    homeCapacity: main.storageCapacity,
    project: main.ns + '-project',
    projectPath: main.nfsvol + '/projects',
    projectCapacity: main.storageCapacity,
    edu: main.ns + '-edu',
    eduPath: main.nfsvol + '/edu',
    eduCapacity: main.storageCapacity,
    attachment: main.ns + '-attachments',
    attachmentPath: main.nfsvol + '/attachments',
    attachmentCapacity: main.storageCapacity,
    scratch: main.ns + '-scratch',
    scratchPath: main.nfsvol + '/scratch',
    scratchCapacity: main.storageCapacity,
    report: main.ns + '-report',
    reportPath: main.nfsvol + '/reports',
    reportCapacity: main.storageCapacity,
  },

  PV(name, cap='1G', path='/srv/vols', server=self.nfsserver): {
    apiVersion: 'v1',
    kind: 'PersistentVolume',
    metadata: {
      name: name,
    },
    spec: {
      capacity: {
        storage: cap,
      },
      volumeMode: 'Filesystem',
      accessModes: [
        'ReadWriteMany',
      ],
      persistentVolumeReclaimPolicy: 'Retain',
      nfs: {
        path: path,
        server: server,
      },
    },
  },

  PVC(name, pvname, ns=self.ns, cap='1G'): {
    apiVersion: 'v1',
    kind: 'PersistentVolumeClaim',
    metadata: {
      name: name,
      namespace: ns,
    },
    spec: {
      accessModes: [
        'ReadWriteMany',
      ],
      volumeMode: 'Filesystem',
      resources: {
        requests: {
          storage: cap,
        },
      },
      storageClassName: '',
      volumeName: pvname,
    },
  },
}

